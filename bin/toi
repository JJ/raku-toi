#!/usr/bin/env raku

# Example telegram bot that uses the module for checking in

use Telegram; # remember to zef install Telegram
use Toi;
use Toi::Data::YAML;
use Array::Shaped::Console;

sub MAIN( $file-name = "toi.yaml",
          UInt $x = 12, UInt $y = 12) {

    say "Usando $file-name para almacenar check-ins";
    die "No token" unless %*ENV<TOI_BOT_TOKEN>;
    my $bot = Telegram::Bot.new(%*ENV<TOI_BOT_TOKEN>);
    my $data = Toi::Data::YAML.new;
    my $toi = Toi.new: :$data;
    my @map-fill[$y,$x] = (-1 xx $x ) xx $y;
    say @map-fill;
    $bot.start(1);

react {
    whenever $bot.messagesTap -> $msg {
    	say "$x, $y";
	say $msg.raku;
        my @map[$y,$x] = @map-fill;
        $msg.text ~~ /\/$<command> = (\w+) \h* $<args> = (.*)/;
        say $msg.raku, " â†’ ",  $<command>;
        given $<command> {
            when "toi" {
                my @args = $<args>.words.map: +*;
                say "Args, @args";
                my $x-pos = @args[0];
                my $y-pos = @args[1];
                if $x-pos > $x || $y-pos > $y {
                    $bot.sendMessage( $msg.chat.id,
                            "x $x-pos o y $y-pos fuera de rango; la clase es $x x $y " );
                } else {
                    $toi.check-in($msg.sender.username, |@args);
                    @map[$x-pos -1; $y-pos-1 ] = 1;
                    my $map = printed(@map, <# @>);
                    $bot.sendMessage($msg.chat.id, "$map para @"
                            ~ $msg.sender.username) ;
                }
            }
            when "about" {
                $bot.sendMessage($msg.chat.id, q:to/EOM/);
To check in, use /toi coord-x coord-y
The coord-x and coord-y in class will follow the same convention
EOM
            }
        }
    }
    whenever signal(SIGINT) {
        $bot.stop;
        exit;
    }
}
}
